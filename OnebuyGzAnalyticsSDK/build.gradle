apply plugin: 'com.android.library'
apply from: "../script_config/maven.gradle"
if (rootProject.ext.publish.isEmbedAnalyticSDKAAR) { //用于打本地包
    apply plugin: 'com.kezong.fat-aar'
}

version = rootProject.ext.versions.sdk_version

android {
    compileSdkVersion rootProject.ext.buildConfig.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.buildConfig.minSdkVersion
        targetSdkVersion rootProject.ext.buildConfig.targetSdkVersion
        versionCode rootProject.ext.buildConfig.versionCode
        versionName rootProject.ext.buildConfig.versionName
        consumerProguardFiles 'proguard-rules.pro'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }

    testOptions {
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
        unitTests.includeAndroidResources = true
    }
}
fataar {
    /**
     * If transitive is true, local jar module and remote library's dependencies will be embed.
     * If transitive is false, just embed first level dependency
     * Local aar project does not support transitive, always embed first level
     * Default value is false
     * @since 1.3.0
     */
    transitive = true
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    if (rootProject.ext.publish.isEmbedAnalyticSDKAAR) { //用于打本地包
        embed project(path: ':module_core', configuration: 'default')
        embed project(path: ':module_visual', configuration: 'default')
        embed project(path: ':module_autoTrack', configuration: 'default')
    } else {
        api project(':module_core')
        api project(':module_visual')
        api project(':module_autoTrack')
    }
//    api project(':module_advert')
//    api project(':module_push')
//    api project(':module_encrypt')
}
